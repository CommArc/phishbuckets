#!/usr/bin/env python3
"""

pbatq - like  'atq', but more useful for us

    e.g.

    4923  Oct 03 10:15 AUTO-ACME-2 'LOL here are some pix'
    5888  Oct 03 10:15 AUTO-PROUDF-3 "Your recent transactions"
    4802  Oct 04 05:00 AUTO-PROUDF-0 "Urgent funds transfer!"

    So...

    pbatq                     # list of all in cron order
    pbatq | grep 'ACME'       # list just the 'ACME' tasks, but in cron order

"""

#   TODO
#   - better handling to 'skip', and note, any oddball/broken jobs
#   - special handling for 'spears' (in the future)
#   - special handling for the "pbcollectresults" jobs
#   - cleanup the code

import calendar
import csv
import subprocess
import sys


# noinspection PyBroadException
def main():
    at_tasks = get_at_tasks()
    clean_tasks = []
    # print("at_tasks: ", at_tasks)
    for idx, task in enumerate(at_tasks):
        # print("idx: ", idx)
        #   Get and append details
        details = get_details(task[0])
        try:
            at_tasks[idx].append(details[0])  # Campaign name
            at_tasks[idx].append(details[1])  # Subject line
            type(at_tasks[idx][7])  # will except if an 'oddball'
            #   Calc and append a timestamp to sort by 
            timestamp = calc_timestamp(task)
            at_tasks[idx].append(timestamp)
            clean_tasks.append(at_tasks[idx])
        except:
            print("\nSkipped 'at' job #: ", task[0], " - something odd with this!\n")

    sort_and_print(clean_tasks)


# ------- supporting functions are defined below -------------------------

def get_at_tasks():
    """Show the queued tasks."""

    bash = "atq"
    atlist = subprocess.check_output([bash], shell=True)
    #   Comes back as bytes, hence the decode bit...
    alljobs = atlist.decode("utf-8")
    jobslist = alljobs.split("\n")
    del jobslist[-1]  # delete the blank one at the end

    at_tasks = []  # the new list
    job_num = 0
    for job in jobslist:
        job_num += 1
        # print("job_num: ", job_num)
        job_bits = job.split()
        #   Remove the last two fields
        del job_bits[-1]
        del job_bits[-1]
        #   Append into the new list  
        at_tasks.append(job_bits)
    return at_tasks


# noinspection PyBroadException
def get_details(tasknum):
    """ Get the details for an 'at' task, based on its #."""

    bash = "at -c " + tasknum + "| tail -2 |head -1"
    atdet = (subprocess.check_output([bash], shell=True)).decode("utf-8")
    atdet_list = [atdet]
    read_items = csv.reader(atdet_list, delimiter=' ', quotechar="'",
                            skipinitialspace=True)
    key_items = list(read_items)
    # noinspection PyBroadException
    try:
        the_two = [key_items[0][1], key_items[0][2]]
        return the_two
    except:
        return


# noinspection PyPep8Naming,PyPep8Naming
def calc_timestamp(task):
    """ Make an ISO date-time string to sort by."""

    dd = task[3].zfill(2)
    # noinspection PyPep8Naming
    MMM = task[2]
    tttt = task[4]
    # noinspection PyPep8Naming
    YYYY = task[5]
    months = {v: k for k, v in enumerate(calendar.month_abbr)}
    mm = str(months[MMM]).zfill(2)
    # ISO = YYYY-MM-DDTHH:MM:SS.mmmmmm
    timestamp = str(YYYY) + "-" + str(mm) + "-" + dd + " " + str(tttt)
    return timestamp


# noinspection PyBroadException
def sort_and_print(tasklist):
    """ Sort tasks in chronological order; and print to screen."""

    try:
        tasks = sorted(tasklist, key=lambda item: item[8])
    except:
        print("Skipped...")
        return
    for task in tasks:
        try:
            print(
                task[0], ":",
                task[3],
                task[2], " @",
                task[4][0:5], " ",
                task[6], " ",
                task[7]
            )
        except:
            print("Skipped: ", task[0])
    return


if __name__ == '__main__':
    sys.exit(main())
