#!/usr/bin/env python3 
#
"""This will be called by the "at" jobs setup by the 'create-plan' script
     - creates and runs the 'gophish' campaigns *immediately*
     - trusts "pbcreateplan" to have checked stuff - so does no more checking...
"""

import sys


def main():
    import json
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    import smtplib
    from pbsettings import PHISH_MASTER, EMAIL_FROM
    from pbgophish import create_camp

    if len(sys.argv) < 7:
        sys.exit(
            "\n Usage: pbcreatecampaign <name> <template> <page> <url> <smtp> <groups>"
            "\n "
        )

    o_data = {"name": sys.argv[1],
              "template": {"name": sys.argv[2]},
              "page": {"name": sys.argv[3]},
              "url": sys.argv[4],
              "smtp": {"name": sys.argv[5]},
              "groups": [{"name": sys.argv[6]}]
              }
    n_data = json.dumps(o_data)

    #   Now create the new campaign
    resp = create_camp(n_data)

    if True:  # we never get here is the creation failed...
        print("[OK] Added, and all went fine")
        #   and send and email alert...
        msg = MIMEMultipart()
        fromaddr = EMAIL_FROM
        recip = PHISH_MASTER
        msg['From'] = fromaddr
        msg['To'] = recip
        msg['Subject'] = "New mailout (campaign) just sent!"
        body = n_data
        msg.attach(MIMEText(body, 'plain'))
        text = msg.as_string()
        server = smtplib.SMTP('localhost')  # bit of an assumption here!
        server.sendmail(fromaddr, recip, text)
        print("[OK] Monitoring email sent out")
        server.quit()
    else:
        print("Houston, we have a problem....")
        print("\nText: ")
        print(resp.text)
        print("\nEncoding: ")
        print(resp.encoding)


# ------------------------------------------------------

if __name__ == '__main__':
    sys.exit(main())
